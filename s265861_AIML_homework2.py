# -*- coding: utf-8 -*-
"""Homework2-AIML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1phRDWg__wBkwxhSfQvfdMpTOxb5r9ygu

**Install requirements**
"""

!pip3 install 'torch==1.3.1'
!pip3 install 'torchvision==0.4.2'
!pip3 install 'Pillow-SIMD'
!pip3 install 'tqdm'

"""**Import libraries**"""

import os
import logging

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Subset, DataLoader
from torch.backends import cudnn

import torchvision
from torchvision import transforms
from torchvision.models import alexnet

from PIL import Image
from tqdm import tqdm

import numpy as np
import matplotlib.pyplot as plt

"""**Set Arguments**"""

DEVICE = 'cuda' # 'cuda' or 'cpu'

NUM_CLASSES = 101 # UPDATED, 101 + 1: There is am extra Background class that should be removed 

BATCH_SIZE = 256     # Higher batch sizes allows for larger learning rates. An empirical heuristic suggests that, when changing
                     # the batch size, learning rate should change by the same factor to have comparable results

LR = 0.01           # The initial Learning Rate
MOMENTUM = 0.9       # Hyperparameter for SGD, keep this at 0.9 when using SGD
WEIGHT_DECAY = 5e-5  # Regularization, you can keep this at the default

NUM_EPOCHS = 30 #was 30     # Total number of training epochs (iterations over dataset)
STEP_SIZE = 20 #was 20      # How many epochs before decreasing learning rate (if using a step-down policy)
GAMMA = 0.8          # Multiplicative factor for learning rate step-down

LOG_FREQUENCY = 10

"""**Define Data Preprocessing**"""

# Define transforms for training phase
train_transform = transforms.Compose([transforms.Resize(256),      # Resizes short size of the PIL image to 256
                                      transforms.CenterCrop(224),  # Crops a central square patch of the image
                                                                   # 224 because torchvision's AlexNet needs a 224x224 input!
                                                                   # Remember this when applying different transformations, otherwise you get an error
                                      transforms.ToTensor(), # Turn PIL Image to torch.Tensor
                                      transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225)) # Normalizes tensor with mean and standard deviation
])
# Define transforms for the evaluation phase
eval_transform = transforms.Compose([transforms.Resize(256),
                                      transforms.CenterCrop(224),
                                      transforms.ToTensor(),
                                      transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))                                    
])

#Point4 Data Augmentation
train_aug_transform_1 = transforms.Compose([transforms.Resize(256),
                                          transforms.ColorJitter(brightness=20, contrast=10, saturation=30),
                                          transforms.CenterCrop(224),
                                          transforms.ToTensor(),
                                          transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))
])

eval_aug_transform_1 = transforms.Compose([transforms.Resize(256),
                                          transforms.ColorJitter(brightness=20, contrast=10, saturation=30),
                                          transforms.CenterCrop(224),
                                          transforms.ToTensor(),
                                          transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))
])

train_aug_transform_2 = transforms.Compose([transforms.Resize(256),
                                          transforms.ColorJitter(contrast=10, hue=0.2),
                                          transforms.RandomHorizontalFlip(p=0.5),
                                          transforms.CenterCrop(224),
                                          transforms.ToTensor(),
                                          transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))
])

eval_aug_transform_2 = transforms.Compose([transforms.Resize(256),
                                          transforms.ColorJitter(contrast=10, hue=0.2),
                                          transforms.RandomHorizontalFlip(p=0.5),
                                          transforms.CenterCrop(224),                                           
                                          transforms.ToTensor(),
                                          transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))
])

train_aug_transform_3 = transforms.Compose([transforms.Resize(256),
                                          transforms.RandomRotation(degrees=15),
                                          transforms.CenterCrop(224),
                                          transforms.ToTensor(),
                                          transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))
])

eval_aug_transform_3 = transforms.Compose([transforms.Resize(256),
                                          transforms.RandomRotation(degrees=15),
                                          transforms.CenterCrop(224),
                                          transforms.ToTensor(),
                                          transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))
])

"""**Prepare Dataset**

## Filter out Background class
"""

from torchvision.datasets import VisionDataset

from PIL import Image
from IPython.core.debugger import set_trace

import re
import os
import os.path
import sys

IMG_EXTENSIONS = ('.jpg', '.jpeg', '.png', '.ppm', '.bmp', '.pgm', '.tif', '.tiff', '.webp')

def has_file_allowed_extension(filename, extensions):
    """Checks if a file is an allowed extension.

    Args:
        filename (string): path to a file
        extensions (tuple of strings): extensions to consider (lowercase)

    Returns:
        bool: True if the filename ends with one of given extensions
    """
    return filename.lower().endswith(extensions)


def is_image_file(filename):
    """Checks if a file is an allowed image extension.

    Args:
        filename (string): path to a file

    Returns:
        bool: True if the filename ends with a known image extension
    """
    return has_file_allowed_extension(filename, IMG_EXTENSIONS)


def make_dataset(dir, class_to_idx, extensions=None, is_valid_file=None, split=None):
    #set_trace()
    dir = os.path.expanduser(dir)
    home = dir.split('/') # home = Homework2-Caltech101
    images = []
    #set_trace()

    if not ((extensions is None) ^ (is_valid_file is None)):
        raise ValueError("Both extensions and is_valid_file cannot be None or not None at the same time")
    if extensions is not None:
        def is_valid_file(x):
            return has_file_allowed_extension(x, extensions)

    if split == 'train':
        train_images_paths = [line.rstrip('\n') for line in open(home[0]+'/train.txt')  if 'BACKGROUND_Google/' not in line]  
      
        for tip in train_images_paths:
          path = os.path.join(dir, tip)
          if is_valid_file(path):
            #set_trace()
            target = tip.split('/')[0]
            item = (path, class_to_idx[target])
            images.append(item)

    elif split == 'test':
        test_images_paths = [line.rstrip('\n') for line in open(home[0]+'/test.txt') if 'BACKGROUND_Google/' not in line]

        for tip in test_images_paths:     
          path = os.path.join(dir, tip)
          if is_valid_file(path):
            #set_trace()
            target = tip.split('/')[0]

            item = (path, class_to_idx[target])
            images.append(item)

    else: 
        RuntimeError("This function create dataset folder based on a split: <train or test>")

    return images



def pil_loader(path):
    # open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)
    with open(path, 'rb') as f:
        img = Image.open(f)
        return img.convert('RGB')


def accimage_loader(path):
    import accimage
    try:
        return accimage.Image(path)
    except IOError:
        # Potentially a decoding problem, fall back to PIL.Image
        return pil_loader(path)


def default_loader(path):
    #set_trace()
    from torchvision import get_image_backend
    if get_image_backend() == 'accimage':
        return accimage_loader(path)
    else:
        return pil_loader(path)

class Caltech(VisionDataset):

    def __init__(self, root, loader, extensions=None, transform=None,
                 target_transform=None, is_valid_file=None, split=None):
        super(Caltech, self).__init__(root, transform=transform,
                                            target_transform=target_transform)
        
        self.split = split
        self.loader = pil_loader
        self.extensions = extensions
        classes, class_to_idx = self._find_classes(self.root)
        samples = make_dataset(self.root, class_to_idx, IMG_EXTENSIONS, is_valid_file, self.split)
        #set_trace()
        if len(samples) == 0:
            raise (RuntimeError("Found 0 files in subfolders of: " + self.root + "\n"
                                "Supported extensions are: " + ",".join(extensions)))


        self.classes = classes
        self.class_to_idx = class_to_idx
        self.samples = samples
        self.targets = [s[1] for s in samples]
        print('\n[{}] Number of classes: {}'.format(self.split, len(classes)))

    def _find_classes(self, dir):
        classes = []
        #set_trace()
        home = dir.split('/')[0]
        train_images_paths = [line.rstrip('\n') for line in open(home+'/train.txt')  if 'BACKGROUND_Google/' not in line]  

        for tip in train_images_paths:
          #set_trace()
          label = tip.split('/')[0]
          if label not in classes:
            classes.append(label)
        
        

        #classes = [d.name for d in os.scandir(dir) if (d.is_dir() and (re.match(r'[^BACKGROUND_Google+]', d.name)))]
        #set_trace()
        classes = sorted(classes, key = lambda s: s.casefold())
        #classes.sort()
        class_to_idx = {classes[i]: i for i in range(len(classes))}

        return classes, class_to_idx

    def __getitem__(self, index):
        """
        Args:
            index (int): Index

        Returns:
            tuple: (sample, target) where target is class_index of the target class.
        """
        #set_trace()
        path, target = self.samples[index]
        sample = self.loader(path)
        if self.transform is not None:
            sample = self.transform(sample)
        if self.target_transform is not None:
            target = self.target_transform(target)

        return sample, target


    def __len__(self):
        
        return len(self.samples)



IMG_EXTENSIONS = ('.jpg', '.jpeg', '.png', '.ppm', '.bmp', '.pgm', '.tif', '.tiff', '.webp')




class CaltechImageFolder(Caltech):


    def __init__(self, root, transform=None, target_transform=None,
                 loader=default_loader, is_valid_file=None):
        #set_trace()
        super(CaltechImageFolder, self).__init__(root, loader, IMG_EXTENSIONS if is_valid_file is None else None,
                                          transform=transform,
                                          target_transform=target_transform,
                                          is_valid_file=is_valid_file)
        
        self.imgs = self.samples

# Clone github repository with data
if not os.path.isdir('./Homework2-Caltech101'):
  !git clone https://github.com/MachineLearning2020/Homework2-Caltech101.git

DATA_DIR = 'Homework2-Caltech101/101_ObjectCategories'
train_split_paths = 'Homework2-Caltech101/train.txt'
test_split_paths = 'Homework2-Caltech101/test.txt'


# Prepare Pytorch train/test Datasets
train_dataset = Caltech(DATA_DIR, IMG_EXTENSIONS, split='train', transform=train_aug_transform_3)
test_dataset = Caltech(DATA_DIR, IMG_EXTENSIONS, split='test', transform=eval_aug_transform_3)



#train_ds_imageFolder = CaltechImageFolder(train_dataset_folder)
#test_ds_imageFolder = CaltechImageFolder(test_dataset_folder)

#train_dataset = torchvision.datasets.ImageFolder(DATA_DIR, transform=train_transform)
#test_dataset = torchvision.datasets.ImageFolder(DATA_DIR, transform=eval_transform)


#train_indexes = [idx for idx in range(len(train_dataset)) if idx % 5]
#test_indexes = [idx for idx in range(len(test_dataset)) if not idx % 5]



# Check dataset sizes
print('Train Dataset Size: {}'.format(len(train_dataset)))
print('Test Dataset Size: {}'.format(len(test_dataset)))

"""**Validation Set for hyperparameter tuning and model selection**"""

from torch.utils.data.sampler import SubsetRandomSampler

val_split = .5
shuffle_dataset = True
random_seed = 20
#Creating data indexes for training and validation splits:

training_big_size = len(train_dataset)
print('Initial size of training set: {}\n'.format(training_big_size))
indexes = list(range(training_big_size))
split = int(np.floor(val_split * training_big_size))


if shuffle_dataset:
  np.random.seed(random_seed)
  np.random.shuffle(indexes)
train_idx, val_idx = indexes[split:], indexes[:split]
#set_trace()

train_dataset_new = Subset(train_dataset, train_idx)
val_dataset_new = Subset(train_dataset, val_idx)
print('Index for new training and validation set created:\nTraining: {}\nValidation: {}'.format(sorted(train_idx), sorted(val_idx)))
print('New sizes:\ntrain_new: {}\nval_new: {}'.format(len(train_dataset_new), len(val_dataset_new)))

"""**Prepare Dataloaders**"""

# Dataloaders iterate over pytorch datasets and transparently provide useful functions (e.g. parallelization and shuffling)
train_dataloader = DataLoader(train_dataset_new, batch_size=BATCH_SIZE, shuffle=True, num_workers=4, drop_last=True)
val_dataloader = DataLoader(val_dataset_new, batch_size=BATCH_SIZE, shuffle=False, num_workers=4, drop_last=True)
test_dataloader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=4)

"""**Prepare Network**"""

net = alexnet(pretrained=True) # Loading AlexNet model

# AlexNet has 1000 output neurons, corresponding to the 1000 ImageNet's classes
# We need 101 outputs for Caltech-101
net.classifier[6] = nn.Linear(4096, NUM_CLASSES) # nn.Linear in pytorch is a fully connected layer
                                                 # The convolutional layer is nn.Conv2d

# We just changed the last layer of AlexNet with a new fully connected layer with 101 outputs
# It is mandatory to study torchvision.models.alexnet source code

"""**Prepare Training**"""

# Define loss function
criterion = nn.CrossEntropyLoss() # for classification, we use Cross Entropy

# Choose parameters to optimize
# To access a different set of parameters, you have to access submodules of AlexNet
# (nn.Module objects, like AlexNet, implement the Composite Pattern)
# e.g.: parameters of the fully connected layers: net.classifier.parameters()
# e.g.: parameters of the convolutional layers: look at alexnet's source code ;) 
parameters_to_optimize = net.parameters() # In this case we optimize over all the parameters of AlexNet
train_conv = net.features.parameters()
train_fully_conn = net.classifier.parameters()

# Define optimizer
# An optimizer updates the weights based on loss
# We use SGD with momentum
optimizer = optim.SGD(parameters_to_optimize, lr=LR, momentum=MOMENTUM, weight_decay=WEIGHT_DECAY)

# Define scheduler
# A scheduler dynamically changes learning rate
# The most common schedule is the step(-down), which multiplies learning rate by gamma every STEP_SIZE epochs
scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=STEP_SIZE, gamma=GAMMA)

"""**Train**"""

# By default, everything is loaded to cpu
net = net.to(DEVICE) # this will bring the network to GPU if DEVICE is cuda

cudnn.benchmark # Calling this optimizes runtime

current_step = 0
max_accuracy = 0
val_accuracies = []
losses = []
sum_train_losses = 0
# Start iterating over the epochs
for epoch in range(NUM_EPOCHS):
  sum_train_losses = 0
  print('Starting epoch {}/{}, LR = {}'.format(epoch+1, NUM_EPOCHS, scheduler.get_lr()))


  # Iterate over the dataset
  for images, labels in train_dataloader:
    #set_trace()
    # Bring data over the device of choice
    images = images.to(DEVICE)
    labels = labels.to(DEVICE)

    net.train() # Sets module in training mode

    # PyTorch, by default, accumulates gradients after each backward pass
    # We need to manually set the gradients to zero before starting a new iteration
    optimizer.zero_grad() # Zero-ing the gradients

    # Forward pass to the network
    outputs = net(images)

    # Compute loss based on output and ground truth
    loss = criterion(outputs, labels)

    # Log loss
    if current_step % LOG_FREQUENCY == 0:
      print('Step {}, Loss {}'.format(current_step, loss.item()))
    sum_train_losses += loss.item()*images.size(0)

    # Compute gradients for each layer and update weights
    loss.backward()  # backward pass: computes gradients
    optimizer.step() # update weights based on accumulated gradients

    current_step += 1

  #Evaluation on Validation set for each run
  net.train(False) # Set Network to evaluation mode

  running_corrects = 0
  for images, labels in tqdm(val_dataloader):
    images = images.to(DEVICE)
    labels = labels.to(DEVICE)

    # Forward Pass
    outputs = net(images)

    # Get predictions
    _, preds = torch.max(outputs.data, 1)

    # Update Corrects
    running_corrects += torch.sum(preds == labels.data).data.item()

  # Calculate Accuracy
  accuracy = running_corrects / float(len(val_dataset_new))
  val_accuracies.append(accuracy)
  losses.append(sum_train_losses/float(len(train_dataset_new)))

  if(accuracy > max_accuracy):
    max_accuracy = accuracy
    best_epoch = epoch
    loss_best_epoch = loss.item()

  print('\nValidation Accuracy: {}'.format(accuracy))
  

  # Step the scheduler
  scheduler.step() 


plt.show()
plt.figure()
plt.plot(val_accuracies, marker=".", label="accuracy")
plt.plot(losses, "r", marker=".", label="losses")
plt.legend(loc="upper right")
plt.title("Accuracies on ValidationSet. [LR = {}] [Gamma = {}]".format(LR, GAMMA))
plt.xlabel("epoch")
plt.ylabel("accuracy")
plt.grid(axis='y')
plt.show()

print('\nBest Accuracy on Validation set for epoch = {} is: {}, with loss = {} and LR = {}'.format(best_epoch+1, max_accuracy, loss_best_epoch, LR))

"""**Test**"""

net = net.to(DEVICE) # this will bring the network to GPU if DEVICE is cuda
net.train(False) # Set Network to evaluation mode

running_corrects = 0
for images, labels in tqdm(test_dataloader):
  images = images.to(DEVICE)
  labels = labels.to(DEVICE)

  # Forward Pass
  outputs = net(images)

  # Get predictions
  _, preds = torch.max(outputs.data, 1)

  # Update Corrects
  running_corrects += torch.sum(preds == labels.data).data.item()

# Calculate Accuracy
accuracy = running_corrects / float(len(test_dataset))

print('Test Accuracy: {}'.format(accuracy))